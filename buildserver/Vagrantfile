# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  #---Puppet Lab's CentOS Boxes---
  #https://github.com/puppetlabs/puppet-vagrant-boxes

  #Vanilla
  #config.vm.box = "centos-65-x64-virtualbox-nocm"
  #config.vm.box_url = "http://puppet-vagrant-boxes.puppetlabs.com/centos-65-x64-virtualbox-nocm.box"

  #Puppet
  #config.vm.box = "centos-65-x64-virtualbox-puppet"
  #config.vm.box_url = "http://puppet-vagrant-boxes.puppetlabs.com/centos-65-x64-virtualbox-puppet.box"

  #CentOS 7.x + Puppet 3.x
  #config.vm.box = "vStone/centos-7.x-puppet.3.x"
  #config.vm.box_url = "https://vagrantcloud.com/vStone/centos-7.x-puppet.3.x"
  #config.vm.box = "centos7"
  #config.vm.box_url =  "https://f0fff3908f081cb6461b407be80daf97f07ac418.googledrive.com/host/0BwtuV7VyVTSkUG1PM3pCeDJ4dVE/centos7.box"

  #Home made 
  config.vm.box = "centos7-basic"
  config.vm.box_url =  "file:///Users/stef/vagrant/personal-boxes/centos7-basic/centos7-basic.box" 
  config.ssh.pty = true
  config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode. Use for debugging
  # vb.gui = true
  # Use VBoxManage to customize the VM. For example to change memory:
  vb.customize ["modifyvm", :id, "--memory", "2048"]
  vb.customize ["modifyvm", :id, "--cpus", "2"]
  #vb.customize ["modifyvm", :id, "--usb", "off"]
  #vb.customize ["modifyvm", :id, "--usbehci", "off"]
  vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
  vb.customize ["modifyvm", :id, "--cableconnected2", "on"]
  vb.customize ["modifyvm", :id, "--cableconnected3", "off"]
  vb.customize ["modifyvm", :id, "--cableconnected4", "off"]
  vb.customize ["modifyvm", :id, "--cableconnected5", "off"]

  # Set the timesync threshold to 10 seconds, instead of the default 20 minutes.
  vb.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 10000]
  #Shares
  # config.vm.synced_folder "tomcat/webapps", "/var/lib/tomcat/webapps", create:true, owner: "tomcat", group: "tomcat", mount_options: ["dmode=777,fmode=666"]
  # config.vm.synced_folder "tomcat/conf", "/etc/tomcat", create:true, owner: "tomcat", group: "tomcat", mount_options: ["dmode=777,fmode=666"]
  # config.vm.synced_folder "tomcat/log", "/var/log/tomcat", create:true, owner: "tomcat", group: "tomcat", mount_options: ["dmode=777,fmode=666"]
  #Shares
  config.vm.synced_folder "tomcat/webapps", "/var/lib/tomcat/webapps", create:true, owner: "vagrant", group: "vagrant", mount_options: ["dmode=777,fmode=666"]
  config.vm.synced_folder "tomcat/conf", "/etc/tomcat", create:true, owner: "vagrant", group: "vagrant", mount_options: ["dmode=777,fmode=666"]
  config.vm.synced_folder "tomcat/log", "/var/log/tomcat", create:true, owner: "vagrant", group: "vagrant", mount_options: ["dmode=777,fmode=666"]


  #---Networking---
  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  #config.vm.network :private_network, ip: "192.168.33.11", auto_config: false
  config.vm.network "private_network", ip: "192.168.33.11"
  config.vm.hostname = "laptop-ci.sc-ict.intranet"
  
  # Tomcat Port forward 8080 to 8080
  config.vm.network :forwarded_port, guest: 8080, host: 8080, auto_correct: true
  # config.vm.network :forwarded_port, guest: 443, host: 443, auto_correct: true
  
  # GitBlit ports
  config.vm.network :forwarded_port, guest: 8443, host: 8443, auto_correct: true

  #Uncomment this if you want bridged network functionality
  #config.vm.network :public_network
  
  #Create firewall rules needed for new OSX
  config.trigger.after [:provision, :up, :reload] do
      system('echo "
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 8080 -> 127.0.0.1 port 8080  
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 8443 -> 127.0.0.1 port 8443
        
    " | sudo pfctl -ef - > /dev/null 2>&1; echo "==> Fowarding Ports: 8080 -> 8080, 8443 -> 8443 & Enabling pf"')  
  end

  config.trigger.after [:halt, :destroy] do
    system("sudo pfctl -df /etc/pf.conf > /dev/null 2>&1; echo '==> Removing Port Forwarding & Disabling pf'")
  end

  # Provision the box using a shell script
  # This script is copied into the box and then run
  config.vm.provision :shell, :privileged => true, :path => "provision.sh"
  end

end
